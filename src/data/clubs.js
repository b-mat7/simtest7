// "attack_start": 2, + "attack" (=current)
// same für alle werte dich sich während Saison ändern können

// lastTenResults: []
// "has_streak": false,

// "has_injured": false,

// "keeper_streak": false -> wenn 5 shots am Stück gehalten, kleiner Bonus bis goal

// "league_next": 1, + "league" (=current) // default = same so dass edit nur bei Auf/Ab


const clubsData = [
  {
    'uuid': '1',
    'name': 'EHC Freiburg',
    'initials': "FRB",
    'colorPrim': null,
    'attack': 3,
    'shoot': 3,
    'defend': 2,
    'save': 1.5,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '2',
    'name': 'EC Kassel Huskies',
    'initials': 'ECK',
    'colorPrim': null,
    'attack': 4,
    'shoot': 3,
    'defend': 3,
    'save': 1,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '3',
    'name': 'EV Landshut',
    'initials': 'EVL',
    'colorPrim': null,
    'attack': 2,
    'shoot': 3,
    'defend': 2,
    'save': 3,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '4',
    'name': 'Ravensburg Towerstars',
    'initials': 'RVT',
    'colorPrim': null,
    'attack': 3,
    'shoot': 4,
    'defend': 2,
    'save': 1,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '5',
    'name': 'Dresdner Eislöwen',
    'initials': 'DRE',
    'colorPrim': null,
    'attack': 3,
    'shoot': 1,
    'defend': 2.5,
    'save': 2,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '6',
    'name': 'Eisbären Regensburg',
    'initials': 'EBR',
    'colorPrim': null,
    'attack': 3.5,
    'shoot': 4,
    'defend': 2,
    'save': 1,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '7',
    'name': 'ESV Kaufbeuren',
    'initials': 'ESV',
    'colorPrim': null,
    'attack': 3,
    'shoot': 3,
    'defend': 2,
    'save': 2,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '8',
    'name': 'Lausitzer Füchse',
    'initials': 'LFX',
    'colorPrim': null,
    'attack': 2,
    'shoot': 2,
    'defend': 3,
    'save': 2,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '9',
    'name': 'Starbulls Rosenheim',
    'initials': 'SBR',
    'colorPrim': null,
    'attack': 1.5,
    'shoot': 2,
    'defend': 4,
    'save': 2,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '10',
    'name': 'Bietigheim Steelers',
    'initials': 'SCB',
    'colorPrim': null,
    'attack': 1.5,
    'shoot': 2.5,
    'defend': 1,
    'save': 3,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '11',
    'name': 'Eispiraten Crimitschau',
    'initials': 'EPC',
    'colorPrim': null,
    'attack': 2.5,
    'shoot': 4,
    'defend': 2,
    'save': 2,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '12',
    'name': 'Krefeld Pinguine',
    'initials': 'KEV',
    'colorPrim': null,
    'attack': 3,
    'shoot': 3,
    'defend': 2.5,
    'save': 1,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '13',
    'name': 'EC Bad Nauheim',
    'initials': 'ECN',
    'colorPrim': null,
    'attack': 4,
    'shoot': 2,
    'defend': 2,
    'save': 1,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '14',
    'name': 'Selber Wölfe',
    'initials': 'SEL',
    'colorPrim': null,
    'attack': 1.5,
    'shoot': 2,
    'defend': 2,
    'save': 3,
    'momentum': 1,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'formData': [],
    'buffSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'wins': 0,
    'winsOvertime': 0,
    'losses': 0,
    'lossesOvertime': 0,

    'seed': function () { return this.attack + this.shoot + this.defend + this.save },
    'playsDiff': function () { return this.attacks - this.defends },
    'goalsDiff': function () { return this.goals - this.goalsAgainst },

    'momentumAverage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed          > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },

    'attackStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.shotStrAverage() - (this.shoot * this.buffAverage())).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.saveStrAverage() - (this.save * this.buffAverage())).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  }
]

export {
  clubsData
}