// "attack_seed": 2, + "attack" (=current)
// same für alle seed werte dich sich während Saison ändern können

// "team_streak": false,

// "team_injured": false,

// "keeper_streak": false -> wenn 5 shots am Stück gehalten, kleiner Bonus bis goal

// "league_next": 1, + "league" (=current) // default = same so dass edit nur bei Auf/Ab

// in/tr calc/weight
// season rewards (per matchday >= target + season-end result)
// QoL:
//    buf -> morale
//    docu
//    parsefloat als func that returns floated val
//    clubs -> 1x create instead of 14x einzeln

const clubsData = [
  {
    'uuid': '1',
    'name': 'EHC Freiburg',
    'initials': "FRB",
    'colorPrim': null,
    'initiative': 1.29, // 1 bis 2
    'transition': 1.71, // 1 + (2 - initiative)
    'attack': 2.15,
    'shoot': 2.27,
    'defend': 2.75,
    'save': 3.11,
    'form': 0,
    'morale': 1,  // morale unit vs buff als sum + avg ... :/

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0, // morale unit vs buff als sum + avg ... :/

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0, // should be [] holding points from each match, together with a pointsSum()...?! -> points.reduce() // like for all others as well
    'results': [], // with above [] -> not needed anymore

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '2',
    'name': 'EC Kassel Huskies',
    'initials': 'ECK',
    'colorPrim': null,
    'initiative': 1.73,
    'transition': 1.27,
    'attack': 4.21,
    'shoot': 3.07,
    'defend': 2.86,
    'save': 1.23,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '3',
    'name': 'EV Landshut',
    'initials': 'EVL',
    'colorPrim': null,
    'initiative': 1.69,
    'transition': 1.31,
    'attack': 2.21,
    'shoot': 2.95,
    'defend': 1.89,
    'save': 2.79,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '4',
    'name': 'Ravensburg Towerstars',
    'initials': 'RVT',
    'colorPrim': null,
    'initiative': 1.44,
    'transition': 1.56,
    'attack': 2.89,
    'shoot': 4.11,
    'defend': 2.02,
    'save': 1.16,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '5',
    'name': 'Dresdner Eislöwen',
    'initials': 'DRE',
    'colorPrim': null,
    'initiative': 1.71,
    'transition': 1.29,
    'attack': 3.04,
    'shoot': 1.11,
    'defend': 2.47,
    'save': 2.11,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '6',
    'name': 'Eisbären Regensburg',
    'initials': 'EBR',
    'colorPrim': null,
    'initiative': 1.58,
    'transition': 1.42,
    'attack': 3.51,
    'shoot': 4.02,
    'defend': 2.18,
    'save': 1.05,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '7',
    'name': 'ESV Kaufbeuren',
    'initials': 'ESV',
    'colorPrim': null,
    'initiative': 1.46,
    'transition': 1.54,
    'attack': 3.11,
    'shoot': 3.06,
    'defend': 2.11,
    'save': 2.09,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '8',
    'name': 'Lausitzer Füchse',
    'initials': 'LFX',
    'colorPrim': null,
    'initiative': 1.82,
    'transition': 1.18,
    'attack': 2.38,
    'shoot': 2.02,
    'defend': 3.05,
    'save': 2.21,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '9',
    'name': 'Starbulls Rosenheim',
    'initials': 'SBR',
    'colorPrim': null,
    'initiative': 1.64,
    'transition': 1.36,
    'attack': 1.75,
    'shoot': 1.98,
    'defend': 4.03,
    'save': 2.11,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '10',
    'name': 'Bietigheim Steelers',
    'initials': 'SCB',
    'colorPrim': null,
    'initiative': 1.47,
    'transition': 1.53,
    'attack': 1.51,
    'shoot': 2.52,
    'defend': 1.08,
    'save': 3.04,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '11',
    'name': 'Eispiraten Crimitschau',
    'initials': 'EPC',
    'colorPrim': null,
    'initiative': 1.28,
    'transition': 1.72,
    'attack': 2.61,
    'shoot': 4.01,
    'defend': 2.18,
    'save': 2.07,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '12',
    'name': 'Krefeld Pinguine',
    'initials': 'KEV',
    'colorPrim': null,
    'initiative': 1.62,
    'transition': 1.38,
    'attack': 3.25,
    'shoot': 2.98,
    'defend': 2.51,
    'save': 1.37,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '13',
    'name': 'EC Bad Nauheim',
    'initials': 'ECN',
    'colorPrim': null,
    'initiative': 1.41,
    'transition': 1.59,
    'attack': 3.98,
    'shoot': 2.17,
    'defend': 2.34,
    'save': 1.23,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '14',
    'name': 'Selber Wölfe',
    'initials': 'SEL',
    'colorPrim': null,
    'initiative': 1.5,
    'transition': 1.5,
    'attack': 1.51,
    'shoot': 2.01,
    'defend': 2.14,
    'save': 3.08,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'buffAvg': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - (this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - (this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.buffAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  }
]

export {
  clubsData
}