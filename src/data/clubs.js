export const clubAttrData = [
  {
    'uuid': '1',
    'name': 'EHC Freiburg',
    'initials': "FRB",
    'colorPrim': null,
    'initiative': 1.29, // 1 bis 2
    'transition': 1.71, // 1 + (2 - initiative)
    'attack': 2.15,
    'shoot': 2.27,
    'defend': 2.75,
    'save': 3.11,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'momentumSum': 0,
    'initiativeStrSum': 0,
    'transitionStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'moraleSum': 0,

    'attacks': 0,
    'defends': 0,
    'counters': 0,
    'fallbacks': 0,
    'attackShots': 0,
    'attackShotsAgainst': 0,
    'counterShots': 0,
    'counterShotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0, // should be [] holding points from each match, together with a pointsSum()...?! -> points.reduce() // like for all others as well
    'results': [], // with above [] -> not needed anymore

    'seed': function () { return            parseFloat((this.initiative + this.transition + this.attack + this.shoot + this.defend + this.save).toFixed(2))},
    'initiativesDiff': function () { return this.attacks - this.defends },
    'transitionsDiff': function () { return this.counters - this.fallbacks },
    'goalsDiff': function () { return       this.goals - this.goalsAgainst },
    'wins': function () { return            [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return    [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return  [...this.results].filter(x => x === 1).length},
    'losses': function () { return          [...this.results].filter(x => x === 0).length},

    'momentumAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.momentumSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'initiativeStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'transitionStrAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrSum / (this.counters + this.fallbacks)).toFixed(2)) : 0 },
    'attackStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAvg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / (this.attackShots + this.counterShots)).toFixed(2)) : 0 },
    'saveStrAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / (this.attackShotsAgainst + this.counterShotsAgainst)).toFixed(2)) : 0 },
    'formAvg': function () { return this.matchesPlayed        > 5 ? parseFloat((this.formSum / (this.matchesPlayed - 4)).toFixed(2)) : 0 }, // ab matchday5 (4 is for displaying)
    'moraleAvg': function () { return this.matchesPlayed      > 0 ? parseFloat((this.moraleSum / this.matchesPlayed).toFixed(2)) : 0 },
    'resultsL5Avg': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'initiativeStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.initiativeStrAvg() - ((this.initiative - this.transition) +  this.initiative * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'transitionStrDiceAvg': function () { return this.matchesPlayed > 0 ? parseFloat((this.transitionStrAvg() - ((this.transition - this.initiative) + this.transition * this.momentumAvg() * 1.3)).toFixed(2)) : 0 },
    'attackStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.attackStrAvg() - (this.attack * this.moraleAvg() + this.formAvg())).toFixed(2)) : 0 },
    'defendStrDiceAvg': function () { return this.matchesPlayed     > 0 ? parseFloat((this.defendStrAvg() - (this.defend * this.moraleAvg() + this.formAvg())).toFixed(2)) : 0 },
    'shotStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.shotStrAvg() - (this.shoot + this.formAvg() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAvg': function () { return this.matchesPlayed       > 0 ? parseFloat((this.saveStrAvg() - (this.save + this.formAvg() / 2)).toFixed(2)) : 0 },

    'initiativesEff': function () { return this.matchesPlayed > 0 ? parseFloat((this.attacks / this.intervalsPlayed * 100).toFixed(1)) : 0 },
    'transitionsEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.counterShots + (this.fallbacks - this.counterShotsAgainst)) / (this.counters + this.fallbacks) * 100).toFixed(1)) : 0 },
    'attacksEff': function () { return this.matchesPlayed    > 0 ? parseFloat((this.attackShots / this.attacks * 100).toFixed(1)) : 0 },
    'defendsEff': function () { return this.matchesPlayed    > 0 ? parseFloat(((this.defends - this.attackShotsAgainst) / this.defends * 100).toFixed(1)) : 0 },
    'countersEff': function () { return this.matchesPlayed   > 0 ? parseFloat((this.counterShots / this.counters * 100).toFixed(1)) : 0 },
    'fallbacksEff': function () { return this.matchesPlayed  > 0 ? parseFloat(((this.fallbacks - this.counterShotsAgainst) / this.fallbacks * 100).toFixed(1)) : 0 },
    'shotsEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / (this.attackShots + this.counterShots) * 100).toFixed(1)) : 0 },
    'savesEff': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100).toFixed(1)) : 0 },
    'shotsSavesEff': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / (this.attackShots + this.counterShots) * 100) + (this.saves / (this.attackShotsAgainst + this.counterShotsAgainst) * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
    }
]