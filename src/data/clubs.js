// "attack_seed": 2, + "attack" (=current)
// same für alle seed werte dich sich während Saison ändern können

// "team_streak": false,

// "team_injured": false,

// "keeper_streak": false -> wenn 5 shots am Stück gehalten, kleiner Bonus bis goal

// "league_next": 1, + "league" (=current) // default = same so dass edit nur bei Auf/Ab


const clubsData = [
  {
    'uuid': '1',
    'name': 'EHC Freiburg',
    'initials': "FRB",
    'colorPrim': null,
    'momentum': 1.29,   // 1 bis 1.5  -> seed calc x2
    'attack': 2.15,
    'shoot': 2.27,
    'defend': 2.75,
    'save': 3.11,
    'form': 0,
    'morale': 1,  // morale unit vs buff als sum + avg ... :/

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0, // morale unit vs buff als sum + avg ... :/
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0, // should be [] holding points from each match, together with a pointsSum()...?! -> points.reduce() // like for all others as well
    'results': [], // with above [] -> not needed anymore

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '2',
    'name': 'EC Kassel Huskies',
    'initials': 'ECK',
    'colorPrim': null,
    'momentum': 1.35,
    'attack': 4.21,
    'shoot': 3.07,
    'defend': 2.86,
    'save': 1.23,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '3',
    'name': 'EV Landshut',
    'initials': 'EVL',
    'colorPrim': null,
    'momentum': 1.38,
    'attack': 2.21,
    'shoot': 2.95,
    'defend': 1.89,
    'save': 2.79,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '4',
    'name': 'Ravensburg Towerstars',
    'initials': 'RVT',
    'colorPrim': null,
    'momentum': 1.23,
    'attack': 2.89,
    'shoot': 4.11,
    'defend': 2.02,
    'save': 1.16,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '5',
    'name': 'Dresdner Eislöwen',
    'initials': 'DRE',
    'colorPrim': null,
    'momentum': 1.34,
    'attack': 3.04,
    'shoot': 1.11,
    'defend': 2.47,
    'save': 2.11,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '6',
    'name': 'Eisbären Regensburg',
    'initials': 'EBR',
    'colorPrim': null,
    'momentum': 1.29,
    'attack': 3.51,
    'shoot': 4.02,
    'defend': 2.18,
    'save': 1.05,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '7',
    'name': 'ESV Kaufbeuren',
    'initials': 'ESV',
    'colorPrim': null,
    'momentum': 1.26,
    'attack': 3.11,
    'shoot': 3.06,
    'defend': 2.11,
    'save': 2.09,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '8',
    'name': 'Lausitzer Füchse',
    'initials': 'LFX',
    'colorPrim': null,
    'momentum': 1.42,
    'attack': 2.38,
    'shoot': 2.02,
    'defend': 3.05,
    'save': 2.21,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '9',
    'name': 'Starbulls Rosenheim',
    'initials': 'SBR',
    'colorPrim': null,
    'momentum': 1.36,
    'attack': 1.75,
    'shoot': 1.98,
    'defend': 4.03,
    'save': 2.11,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '10',
    'name': 'Bietigheim Steelers',
    'initials': 'SCB',
    'colorPrim': null,
    'momentum': 1.27,
    'attack': 1.51,
    'shoot': 2.52,
    'defend': 1.08,
    'save': 3.04,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '11',
    'name': 'Eispiraten Crimitschau',
    'initials': 'EPC',
    'colorPrim': null,
    'momentum': 1.17,
    'attack': 2.61,
    'shoot': 4.01,
    'defend': 2.18,
    'save': 2.07,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '12',
    'name': 'Krefeld Pinguine',
    'initials': 'KEV',
    'colorPrim': null,
    'momentum': 1.19,
    'attack': 3.25,
    'shoot': 2.98,
    'defend': 2.51,
    'save': 1.37,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '13',
    'name': 'EC Bad Nauheim',
    'initials': 'ECN',
    'colorPrim': null,
    'momentum': 1.21,
    'attack': 3.98,
    'shoot': 2.17,
    'defend': 2.34,
    'save': 1.23,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  },
  {
    'uuid': '14',
    'name': 'Selber Wölfe',
    'initials': 'SEL',
    'colorPrim': null,
    'momentum': 1.25,
    'attack': 1.51,
    'shoot': 2.01,
    'defend': 2.14,
    'save': 3.08,
    'form': 0,
    'morale': 1,

    'role': '',
    'roleTarget': {},
    'matchesPlayed': 0,
    'intervalsPlayed': 0,
    'playMomStrSum': 0,
    'momentumStrSum': 0,
    'attackStrSum': 0,
    'defendStrSum': 0,
    'shotStrSum': 0,
    'saveStrSum': 0,
    'formData': [],
    'formSum': 0,
    'buffSum': 0,
    'attacks': 0,
    'defends': 0,
    'shots': 0,
    'shotsAgainst': 0,
    'saves': 0,
    'goals': 0,
    'goalsAgainst': 0,
    'points': 0,
    'results': [],

    'seed': function () { return           parseFloat((this.attack + this.shoot + this.defend + this.save + (this.momentum * 2)).toFixed(2))},
    'playsDiff': function () { return      this.attacks - this.defends },
    'goalsDiff': function () { return      this.goals - this.goalsAgainst },
    'wins': function () { return           [...this.results].filter(x => x === 3).length},
    'winsOvertime': function () { return   [...this.results].filter(x => x === 2).length},
    'lossesOvertime': function () { return [...this.results].filter(x => x === 1).length},
    'losses': function () { return         [...this.results].filter(x => x === 0).length},

    'playMomStrAverage': function () { return this.matchesPlayed  > 0 ? parseFloat((this.playMomStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'momentumStrAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'attackStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrSum / this.attacks).toFixed(2)) : 0 },
    'defendStrAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrSum / this.defends).toFixed(2)) : 0 },
    'shotStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrSum / this.shots).toFixed(2)) : 0 },
    'saveStrAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrSum / this.shotsAgainst).toFixed(2)) : 0 },
    'formAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.formSum / this.matchesPlayed).toFixed(2)) : 0 },
    'buffAverage': function () { return this.matchesPlayed        > 0 ? parseFloat((this.buffSum / this.intervalsPlayed).toFixed(2)) : 0 },
    'resultsL5Average': function () { return this.matchesPlayed   > 0 ? parseFloat((this.results.slice(-5).reduce((a, b) => a + b, 0) / Math.min(this.results.length, 5)).toFixed(2)) : 0 },

    'momentumStrDiceAverage': function () { return this.matchesPlayed > 0 ? parseFloat((this.momentumStrAverage() - this.playMomStrAverage()).toFixed(2)) : 0 },
    'attackStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.attackStrAverage() - (this.attack * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'defendStrDiceAverage': function () { return this.matchesPlayed   > 0 ? parseFloat((this.defendStrAverage() - (this.defend * this.buffAverage() + this.formAverage())).toFixed(2)) : 0 },
    'shotStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.shotStrAverage() - (this.shoot + this.formAverage() / 2)).toFixed(2)) : 0 },
    'saveStrDiceAverage': function () { return this.matchesPlayed     > 0 ? parseFloat((this.saveStrAverage() - (this.save + this.formAverage() / 2)).toFixed(2)) : 0 },

    'attacksPercentage': function () { return this.matchesPlayed    > 0 ? (this.attacks / this.intervalsPlayed * 100).toFixed() : 0 },
    'defendsPercentage': function () { return this.matchesPlayed    > 0 ? (this.defends / this.intervalsPlayed * 100).toFixed() : 0 },
    'shotsPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.goals / this.shots * 100).toFixed(1)) : 0 },
    'savesPercentage': function () { return this.matchesPlayed      > 0 ? parseFloat((this.saves / this.shotsAgainst * 100).toFixed(1)) : 0 },
    'shotsSavesPercentage': function () { return this.matchesPlayed > 0 ? parseFloat(((this.goals / this.shots * 100) + (this.saves / this.shotsAgainst * 100)).toFixed(1)) : 0 },

    'goalsPerMatch': function () { return this.matchesPlayed        > 0 ? parseFloat((this.goals / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsAgainstPerMatch': function () { return this.matchesPlayed > 0 ? parseFloat((this.goalsAgainst / this.matchesPlayed).toFixed(1)) : 0 },
    'goalsDiffPerMatch': function () { return this.matchesPlayed    > 0 ? parseFloat((this.goalsDiff() / this.matchesPlayed).toFixed(1)) : 0 },
    'pointsPerMatch': function () { return this.matchesPlayed       > 0 ? parseFloat((this.points / this.matchesPlayed).toFixed(2)) : 0 },
  }
]

export {
  clubsData
}